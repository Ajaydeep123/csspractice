Key pillars of responsive design:
1. fluid layouts
|---> Float layouts
|---> FlexBox -> laying out 1d row w/o using floats. perfect for component layouts.
|---> Css grid -> " 2d grid. Perfect for page layouts and complex components.

2. responsive units
3. flexible images
4. media queries



Sass has two different syntaxes
1.Sass
2.Scss

CSS architecture: BEM model -> block element modifier

A block represents an object in your website. Think of it as bigger structural chunks of your code.
 Most common blocks on every website today are header, content, sidebar, footer, and search.
Blocks in BEM are always a starting point of chaining your CSS classes on to.
.content {/* Styles */}
.menu {/* Styles */}
.search {/* Styles */}

An element is a component within the block that performs a particular function.
It should only make sense in the context of its block:
.content__article {/* Styles */}
.menu__item {/* Styles */}
.search__input {/* Styles */}

A modifier is how we represent the variations of a block. If you’ve ever used Bootstrap, then the best example would be the button sizes. 
Button sizes are just size variations of the button itself, which makes it the modifier:
.content__article--featured {/* Styles */}
.menu__item--link {/* Styles */}
.search__input--icon {/* Styles */}

<header class=”header”>
  <img class=”header__logo”>
  <form class=”header__search-from”>
    <input class=”header__search-from__input” type=”input”>
    <button class=”header__search-from__button” type=”button”>
  </form>
  <div class=”header__lang-switcher”></div>
</header>

https://codepen.io/ajaydeep123/pen/mdjjVow

The clearfix, for those unaware, is a CSS hack that solves a persistent bug that occurs when two 
floated elements are stacked next to each other.
 When elements are aligned this way, the parent container ends up with a height of 0, and it can easily wreak havoc on a layout.



 Mixin:https://sass-lang.com/documentation/at-rules/mixin
 Mixins allow you to define styles that can be re-used throughout your stylesheet. They make 
 it easy to avoid using non-semantic classes like .float-left, and to distribute collections of styles in libraries.

Extends:
when we have something that is repetitive in nature, we put the common part in a placeholder variable
& extend it inside the class/ element where we are using those properties

​//placeholder
%btn-placeholder{
   padding:10px;
  display:inline-block;
  text-align:center;
  border-radius:100px; 
  width: $width-button;
  @include style-link-text($color-text-light);
}
​
​
.btn-main{
  &:link{
    @extend %btn-placeholder;  // using placeholder properties via extends
    background-color: $color-secondary;
  }
  &:hover{
    background-color: darken($color-secondary,15%);   //darken and lighten are functions provided by sass
  }
}

USE EXTENDS ONLY WHEN THE selectors are INHERENTLY RELATED